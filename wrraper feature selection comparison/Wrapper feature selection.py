# -*- coding: utf-8 -*-
"""Wrapper feature selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kjIdSTsXj1UFw9Pqb-qyZtdwMJ24TKyM
"""

!pip install pyswarms==0.1.9

import torch
import numpy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df =  pd.read_csv('/content/combine_corona_infulenza1.csv',na_values="-N/A-")
df = df.replace({"-N/A-":np.nan}, inplace=False)
df = df.replace({"Unknown":np.nan}, inplace=False)
c=df.columns
#for i,j in zip(list((df.head(0))),np.arange(0,77,1)):
#  print(f'{c[j]}   null values is:  ',df[f'{i}'].isnull().sum())

df = df.fillna(df.mode().iloc[0])

#for i,j in zip(list((df.head(0))),np.arange(0,77,1)):
#  print(f'{c[j]}   null values is:  ',df[f'{i}'].isnull().sum())

fatigue =[]
d = df['Fatigue '].value_counts()
for x in  d.index:
  fatigue.append(x)

for x in fatigue:
  if x=='Yes' :
    i=np.where(df['Fatigue ']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([1])
  if x=='fatigue(Yes)"' :
    i=np.where(df['Fatigue ']== 'fatigue(Yes)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([1])    
  if x=='fatigue(Yes)' :
    i=np.where(df['Fatigue ']== 'fatigue(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([1]) 
  if x=='No' :
    i=np.where(df['Fatigue ']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([0])
  if x=='fatigue(No)' :
    i=np.where(df['Fatigue ']== 'fatigue(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([0])
  if x=='fatigue(Moderate)' :
    i=np.where(df['Fatigue ']== 'fatigue(Moderate)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2])
  if x=='fatigue(Mild)' :
    i=np.where(df['Fatigue ']== 'fatigue(Mild)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2])  
  if x=='fatigue(Mild)"' :
    i=np.where(df['Fatigue ']== 'fatigue(Mild)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2])  
  if x=='fatigue(Moderate)"' :
    i=np.where(df['Fatigue ']== 'fatigue(Moderate)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2]) 
  if x=='fatigue(Severe)' :
    i=np.where(df['Fatigue ']== 'fatigue(Severe)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([3])
  if x=='fatigue(4)' :
    i=np.where(df['Fatigue ']== 'fatigue(4)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2]) 
  if x=='fatigue(EH)"' :
    i=np.where(df['Fatigue ']== 'fatigue(EH)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([2])        
  if x=='fatigue(None)' :
    i=np.where(df['Fatigue ']== 'fatigue(None)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,11]=np.array([-1])
  else:
    for x in df['Fatigue '].value_counts().index[5:]:
      i=np.where(df['Fatigue '] == x)
      i1=[[x for x in j]for j in i ]
      df.iloc[i1,11]=np.array([-1])

Gastrointestinal =[]
d = df['Gastrointestinal '].value_counts()
for x in  d.index:
  Gastrointestinal.append(x)

for x in Gastrointestinal:
  if x=='Yes' :
    i=np.where(df['Gastrointestinal ']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,12]=np.array([1])
  if x=='diarrhea(Yes)' :
    i=np.where(df['Gastrointestinal ']== 'diarrhea(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,12]=np.array([1]) 
  else :
    i=np.where(df['Gastrointestinal ']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,12]=np.array([0])

d =df['Fever'].value_counts()
fever = []
for x in  d.index:
  fever.append(x)

for x in fever:
  if x=='Yes' :
    i=np.where(df['Fever']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([1])
  elif x=='fever(Yes)' :
    i=np.where(df['Fever']== 'fever(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([1]) 
  elif x=='fever(TRUE)"' :
    i=np.where(df['Fever']== 'fever(TRUE)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([1])
  elif x=='fever(Yes)"' :
    i=np.where(df['Fever']== 'fever(Yes)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([1])
  elif x=='No' :
    i=np.where(df['Fever']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([0])
  elif x=='fever(No)' :
    i=np.where(df['Fever']== 'fever(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([0]) 
  elif x=='fever(None)' :
    i=np.where(df['Fever']== 'fever(None)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([-1])
  elif x=='fever(None)"' :
    i=np.where(df['Fever']== 'fever(None)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([-1])    
  elif x=='temperature(101.84)' :
    i=np.where(df['Fever']== 'temperature(101.84)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  elif x=='high_temp_home(101.7)' :
    i=np.where(df['Fever']== 'high_temp_home(101.7)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  elif x=='temperature(100.2)' :
    i=np.where(df['Fever']== 'temperature(100.2)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2])
  elif x=='temperature(100.1)' :
    i=np.where(df['Fever']== 'temperature(100.1)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2])    
  elif x=='temperature(101.66)' :
    i=np.where(df['Fever']== 'temperature(101.66)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  elif x=='high_temp_home(101.12)' :
    i=np.where(df['Fever']== 'high_temp_home(101.12)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  elif x=='temperature(101.66)' :
    i=np.where(df['Fever']== 'temperature(101.66)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  elif x=='temperature(100.8)"' :
    i=np.where(df['Fever']== 'temperature(100.8)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2])   
  elif x=='fever(Mild)' :
    i=np.where(df['Fever']== 'fever(Mild)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2])
  elif x=='fever(Moderate)' :
    i=np.where(df['Fever']== 'fever(Moderate)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2])
  elif x=='temperature(100.8)"' :
    i=np.where(df['Fever']== 'temperature(100.8)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,1]=np.array([2]) 
  else:
    for x in df['Fever'].value_counts().index[4:10]:
      i=np.where(df['Fever'] == x)
      i1=[[x for x in j]for j in i ]
      df.iloc[i1,1]=np.array([4]) 
    for x in df['Fever'].value_counts().index[4:-6]:
      i=np.where(df['Fever'] == x)
      i1=[[x for x in j]for j in i ]
      df.iloc[i1,1]=np.array([2])  
    for x in df['Fever'].value_counts().index[4:]:
      i=np.where(df['Fever'] == x)
      i1=[[x for x in j]for j in i ]
      df.iloc[i1,1]=np.array([4])

Sore_throat = ['Yes','No','throat(Yes)','throat(No)','throat(Unk)']

for x in Sore_throat:
  if x=='Yes' :
    i=np.where(df['Sore throat']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,3]=np.array([1])
  if x=='throat(Yes)' :
    i=np.where(df['Sore throat']== 'throat(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,3]=np.array([1]) 
  if x=='No' :
    i=np.where(df['Sore throat']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,3]=np.array([0])
  if x=='throat(No)' :
    i=np.where(df['Sore throat']== 'throat(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,3]=np.array([0])
  if x=='throat(Unk)' :
    i=np.where(df['Sore throat']== 'throat(Unk)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,3]=np.array([-1])

Running_Nose = ['Yes','No','running nose(Yes)','running nose(No)','running nose(Mild)',
                'running nose(None)','running nose(Unk)','running nose(4)']

for x in Running_Nose:
  if x=='Yes' :
    i=np.where(df['Running Nose']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([1])
  if x=='running nose(Yes)' :
    i=np.where(df['Running Nose']== 'running nose(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([1]) 
  if x=='No' :
    i=np.where(df['Running Nose']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([0])
  if x=='running nose(No)' :
    i=np.where(df['Running Nose']== 'running nose(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([0])
  if x=='running nose(None)' :
    i=np.where(df['Running Nose']== 'running nose(None)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([-1])  
  if x=='running nose(Unk)' :
    i=np.where(df['Running Nose'] == 'running nose(Unk)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([-1]) 
  if x=='running nose(4)' :
    i=np.where(df['Running Nose'] == 'running nose(4)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([3])  
  if x=='running nose(Mild)' :
    i=np.where(df['Running Nose'] == 'running nose(Mild)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,4]=np.array([2])

Hyper_Tension = ['No','Yes','chills(Yes)','chills(No)','chills(Unk)','nausea(Yes)']

for x in Hyper_Tension:
  if x=='Yes' :
    i=np.where(df['Hyper Tension']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([1])
  if x=='No' :
    i=np.where(df['Hyper Tension']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([0]) 
  if x=='chills(Yes)' :
    i=np.where(df['Hyper Tension']== 'chills(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([1])
  if x=='chills(No)' :
    i=np.where(df['Hyper Tension']== 'chills(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([0])
  if x=='chills(Unk)' :
    i=np.where(df['Hyper Tension']== 'chills(Unk)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([-1])  
  if x=='nausea(Yes)' :
    i=np.where(df['Hyper Tension']== 'nausea(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,10]=np.array([-1])

Headache = ['Yes','No','aches(Yes)','headache(None)','headache(Mild)','headache(Severe)','headache(Moderate)',
            'headache(4)','aches(No)','aches(Unk)','headache(Yes)','headache(Not reported)',
            'headache(TRUE)','throat(ukn)']

for x in Headache:
  if x=='Yes' :
    i=np.where(df['Headache']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([1])
#for x in Dry_Cough:    
  if x=='aches(Yes)' :
    i=np.where(df['Headache']== 'aches(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([1])
#for x in Dry_Cough:    
  if x=='headache(TRUE)' :
    i=np.where(df['Headache']== 'headache(TRUE)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([1])
  if x=='headache(Yes)' :
    i=np.where(df['Headache']== 'headache(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([1])    
#for x in Dry_Cough:    
  if x=='headache(Moderate)' :
    i=np.where(df['Headache']== 'headache(Moderate)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([2])
  if x=='headache(Mild)' :
    i=np.where(df['Headache']== 'headache(Mild)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([2])  
#for x in Dry_Cough:    
  if x=='headache(Severe)' :
    i=np.where(df['Headache']== 'headache(Severe)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([3])    
#for x in Dry_Cough:    
  if x=='headache(4)' :
    i=np.where(df['Headache']== 'headache(4)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([3])      
#for x in Dry_Cough:    
  if x=='No' :
    i=np.where(df['Headache']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([0])
#for x in Dry_Cough:      
  if x=='aches(No)' :
    i=np.where(df['Headache']== 'aches(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([0])
#for x in Dry_Cough:    
  if x=='headache(None)':
    i=np.where(df['Headache']== 'headache(None)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([-1]) 
#for x in Dry_Cough:    
  if x=='aches(Unk)' :
    i=np.where(df['Headache']== 'aches(Unk)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([-1])  
  if x=='headache(Not reported)' :
    i=np.where(df['Headache']== 'headache(Not reported)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([-1])       
  if x=='throat(ukn)' :
    i=np.where(df['Headache']== 'throat(ukn)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,7]=np.array([-1])

Dry_Cough = ['Yes','No','cough(Yes)','cough(None)','cough(Mild)','cough(4)','cough(TRUE)',
             'cough(Moderate)','cough(No)','cough(Not reported)','chills(Yes)']

for x in Dry_Cough:
  if x=='Yes' :
    i=np.where(df['Dry Cough']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([1])
#for x in Dry_Cough:    
  if x=='cough(Yes)' :
    i=np.where(df['Dry Cough']== 'cough(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([0.8])
#for x in Dry_Cough:    
  if x=='cough(TRUE)' :
    i=np.where(df['Dry Cough']== 'cough(TRUE)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([0.8])
#for x in Dry_Cough:    
  if x=='cough(Mild)' :
    i=np.where(df['Dry Cough']== 'cough(Mild)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([2])
#for x in Dry_Cough:    
  if x=='cough(Moderate)' :
    i=np.where(df['Dry Cough']== 'cough(Moderate)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([2])    
#for x in Dry_Cough:    
  if x=='cough(4)' :
    i=np.where(df['Dry Cough']== 'cough(4)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([3])      
#for x in Dry_Cough:    
  if x=='No' :
    i=np.where(df['Dry Cough']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([0])
#for x in Dry_Cough:      
  if x=='cough(No)' :
    i=np.where(df['Dry Cough']== 'cough(No)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([0])
#for x in Dry_Cough:    
  if x=='cough(None)' :
    i=np.where(df['Dry Cough']== 'cough(None)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([-1]) 
#for x in Dry_Cough:    
  if x=='cough(Not reported)' :
    i=np.where(df['Dry Cough']== 'cough(Not reported)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([-1])  
  if x=='chills(Yes)' :
    i=np.where(df['Dry Cough']== 'chills(Yes)')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,2]=np.array([-1])

Breathing_Problem = ['Yes','No','dyspnea(No)"','dyspnea(Yes)"','dyspnea(Unk)"']

for x in Breathing_Problem:
  if x=='Yes' :
    i=np.where(df['Breathing Problem']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,0]=np.array([1])
for x in Breathing_Problem:    
  if x=='dyspnea(Yes)"' :
    i=np.where(df['Breathing Problem']== 'dyspnea(Yes)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,0]=np.array([1])
for x in Breathing_Problem:    
  if x=='No' :
    i=np.where(df['Breathing Problem']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,0]=np.array([0])
for x in Breathing_Problem:      
  if x=='dyspnea(No)"' :
    i=np.where(df['Breathing Problem']== 'dyspnea(No)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,0]=np.array([0])
for x in Breathing_Problem:    
  if x=='dyspnea(Unk)"' :
    i=np.where(df['Breathing Problem']== 'dyspnea(Unk)"')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,0]=np.array([-1])

target=df['COVID-19-H1N1-NO']
target_encoding=[]
for x in target:
  if x=='No':
    target_encoding.append(np.array([0]))
  elif  x=='H1N1':
    target_encoding.append(np.array([1])) 
  else:
    target_encoding.append(np.array([2]))

print(target_encoding[-11:-1])
target_encoding1=np.array(target_encoding)
target_encoding=np.array(target_encoding)

COVID =['No','H1N1','Yes']
for x in COVID :    
  if x=='No' :
    i=np.where(df['COVID-19-H1N1-NO']== 'No')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,-1]=np.array([0])      
  if x=='H1N1' :
    i=np.where(df['COVID-19-H1N1-NO']== 'H1N1')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,-1]=np.array([1])   
  if x=='Yes' :
    i=np.where(df['COVID-19-H1N1-NO']== 'Yes')
    i1=[[x for x in j]for j in i ]
    df.iloc[i1,-1]=np.array([2])

one_hot_encoded = pd.get_dummies(df[['Asthma', 'Chronic Lung Disease', 
       'Heart Disease', 'Diabetes', 
       'Abroad travel', 'Contact with COVID Patient',
       'Attended Large Gathering', 'Visited Public Exposed Places',
       'Family working in Public Exposed Places', 'Wearing Masks',
       'Sanitization from Market']], prefix_sep='_', drop_first=False)

#one_hot_encoded

arithmical_relation = df[['Breathing Problem','Fever','Dry Cough','Sore throat',
                          'Sore throat','Headache','Hyper Tension','Fatigue ', 'Gastrointestinal ' ,'COVID-19-H1N1-NO']]

#arithmical_relation

data_num_new = pd.concat([arithmical_relation,one_hot_encoded ],axis=1, sort=False)
data_num_new1 = pd.DataFrame(data_num_new)

data_num_new1.shape

import seaborn as sns

!pip install category_encoders

import category_encoders as ce
c5=one_hot_encoded.columns
encoder5 = ce.TargetEncoder(cols=[x for x in c5])

target_encoder_all2= encoder5.fit_transform(one_hot_encoded,target_encoding)

column4=['Breathing Problem','Fever','Dry Cough',
        'Sore throat','Headache','Hyper Tension','Fatigue ',
         'Gastrointestinal ' ,'COVID-19-H1N1-NO']
encoder4 = ce.TargetEncoder(cols=[x for x in column4])
target_encoder_all= encoder4.fit_transform(df[['Breathing Problem','Fever','Dry Cough',
        'Sore throat','Headache','Hyper Tension','Fatigue ',
         'Gastrointestinal ' ,'COVID-19-H1N1-NO']],target_encoding)

df2 =df

from sklearn.preprocessing import LabelEncoder
var_mod = ['Asthma', 'Chronic Lung Disease', 
       'Heart Disease', 'Diabetes', 
       'Abroad travel', 'Contact with COVID Patient',
       'Attended Large Gathering', 'Visited Public Exposed Places',
       'Family working in Public Exposed Places', 'Wearing Masks',
       'Sanitization from Market']
le = LabelEncoder()
for i in var_mod:
    df2[i] = le.fit_transform(df2[i])
df2 = df2.astype('int64')
df2.dtypes

df2.shape

data_num_new = pd.concat([target_encoder_all,target_encoder_all2],axis=1, sort=False)
data_num_new1 = pd.DataFrame(data_num_new)

data_num_new1 =df2

data_num_new1 = data_num_new1.drop('Wearing Masks', axis=1)
data_num_new1 = data_num_new1.drop('Sanitization from Market', axis=1)

data_num_new1.rename(columns={'COVID-19-H1N1-NO':'Neither COVID-19 Nor H1N1'}, inplace=True)

#data_num_new1.rename(index = {'COVID-19-H1N1-NO':'Neither COVID-19 Nor H1N1'},
#                                 inplace = True)

import matplotlib.pyplot as plt
import matplotlib 
font = {'family' : 'normal',
        'size'   : 10}
SMALL_SIZE = 18     
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)
matplotlib.rc('font', **font) 
plt.figure(figsize=(11, 11))
#plt.title('correlation between each features')
corr =data_num_new1.corr()
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(5, 220, n=50),
    square=True
)

ax.set_xticklabels(    
    ax.get_xticklabels(),
    rotation=40,
    horizontalalignment='right',
    
    
);

from sklearn.feature_selection import VarianceThreshold

constant_filter = VarianceThreshold(threshold=0.12)

constant_filter.fit(data_num_new1)

constant_columns = [column for column in data_num_new1.columns
                    if column not in data_num_new1.columns[constant_filter.get_support()]]

print(constant_columns)

data_num_new1.shape

data_num_new1.head()

#data_num_new1 = data_num_new1.drop('Wearing Masks', axis=1)
#data_num_new1 = data_num_new1.drop('Sanitization from Market', axis=1)
data_num_new1 = data_num_new1.drop('Neither COVID-19 Nor H1N1', axis=1)

data_num_new1.shape

X = data_num_new1
y = target_encoding1
y =y.ravel()
print(X.shape,y.shape)



from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=21)

from imblearn.over_sampling import SMOTE
smote = SMOTE(sampling_strategy='minority',random_state=0)
X_sm, y_sm = smote.fit_resample(X, y)
print(X_sm.shape, y_sm.shape )

import joblib
import sys
sys.modules['sklearn.externals.joblib'] = joblib

from mlxtend.feature_selection import SequentialFeatureSelector as SFS

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB 
from sklearn.ensemble import RandomForestClassifier

from sklearn.ensemble import RandomForestRegressor

from google.colab import data_table
data_table.enable_dataframe_formatter()

from google.colab import data_table
data_table.disable_dataframe_formatter()

from mlxtend.plotting import plot_sequential_feature_selection as plot_sfs

sfs = SFS(RandomForestClassifier(),
           k_features=18,
           forward=True,
           floating=False,
           scoring = 'accuracy',
           cv = 5)
#Use SFS to select the top 10 features 
sfs.fit(X_sm, y_sm)
data_table.enable_dataframe_formatter()
#Create a dataframe for the SFS results 
df_SFS_results = pd.DataFrame(sfs.subsets_).transpose()
df_SFS_results

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (10,10)

fig = plot_sfs(sfs.get_metric_dict(), kind='std_err')

plt.title('Sequential Forward feature Selection')
plt.grid()
plt.show()

from mlxtend.feature_selection import SequentialFeatureSelector as sfs
from sklearn.ensemble import RandomForestRegressor

sfs = SFS(RandomForestClassifier(),
           k_features=1,
          forward=False,
          floating=False,
          verbose=2,
          n_jobs=-1,
           scoring = 'accuracy',
           cv = 5)
#Use SFS to select the top 18 features 
data_table.enable_dataframe_formatter()
sfs.fit(X_sm, y_sm)

#Create a dataframe for the SFS results 
df_SFS_results = pd.DataFrame(sfs.subsets_).transpose()
df_SFS_results

fig = plot_sfs(sfs.get_metric_dict(), kind='std_err')

plt.title('Sequential bakcward feature Selection')
plt.grid()
plt.show()
